image: python:3
stages:
  - format
  - test
  - deploy
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POSTGRES_DB: "cxp_test"
  POSTGRES_USER: "cxp"
  POSTGRES_PASSWORD: "token.01"

  DATABASE_URL: "postgresql+psycopg2://cxp:token.01@cxp_db:5432/cxp_test"

  FIREBASE_AUTH_EMULATOR_ADMIN_HOST: "emulator_admin:9099"
  FIREBASE_AUTH_EMULATOR_WEB_HOST: "emulator_web:9098"

  FLASK_ENV: "development"
  FLASK_DEBUG: "True"
  TESTING: "True"

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .cache/pip
    - .venv/
services:
  - name: postgres:13-alpine
    alias: cxp_db
  - name: frfernandezdev/cxp-firebase-ci-admin:latest
    alias: emulator_admin
  - name: frfernandezdev/cxp-firebase-ci-web:latest
    alias: emulator_web

format:
  stage: format
  before_script:
    - pip install black
  script:
    - black --config .black .

code quality:
  stage: test
  before_script:
    - pip install flake8
  script:
    - flake8 . --output-file=flake8.txt

test:
  stage: test
  needs:
    - format
    - code quality
  only:
    - main
    - develop
    - /^feature-[0-9]\d*(\.[0-9]\d*)*$/
    - /^hotfix-[0-9]\d*(\.[0-9]\d*)*$/
    - /^staging-[0-9]\d*(\.[0-9]\d*)*$/
    - /^release-[0-9]\d*(\.[0-9]\d*)*$/
    - merge_requests
  before_script:
    - pip install virtualenv
    - virtualenv .venv
    - source .venv/bin/activate
    - pip install -r requirements.txt
  script:
    - pytest --ignore=tests/admin --junitxml=report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml

test admin:
  stage: test
  needs:
    - format
    - code quality
  only:
    - main
    - develop
    - /^feature-[0-9]\d*(\.[0-9]\d*)*$/
    - /^hotfix-[0-9]\d*(\.[0-9]\d*)*$/
    - /^staging-[0-9]\d*(\.[0-9]\d*)*$/
    - /^release-[0-9]\d*(\.[0-9]\d*)*$/
    - merge_requests
  before_script:
    - pip install virtualenv
    - virtualenv .venv
    - source .venv/bin/activate
    - pip install -r requirements.txt
  script:
    - pytest tests/admin --junitxml=report-admin.xml
  artifacts:
    when: always
    reports:
      junit: report-admin.xml

staging:
  stage: deploy
  needs:
    - test
    - test admin
  only:
    - staging
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    - dpl --provider=heroku --app=cxp-server-staging --api_key=$HEROKU_API_KEY

prod:
  stage: deploy
  needs:
    - test
    - test admin
  only:
    - tags
  except:
    - branches
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    - dpl --provider=heroku --app=cxp-server-prod --api_key=$HEROKU_API_KEY
